{"version":3,"sources":["components/Level/Level.js","components/Button/Button.js","components/Text/Text.js","components/Text/Title.js","containers/Home/Home.js","components/Card/Card.js","components/Layout/Layout.js","components/Deck/Deck.js","service/settings.js","utils/helpers.js","service/questions.js","containers/Game/Game.js","components/Loader/index.js","containers/Results/Results.js","containers/Settings/Settings.js","components/Content/Content.js","components/ErrorBoundary/ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["Level","styled","div","props","width","nonResponsive","Button","button","Text","span","color","bold","Title","h1","strings","Home","history","onClick","push","Base","animated","Content","borderColor","hard","medium","easy","Card","data","difficulty","category","question","Layout","Wrapper","withComponent","to","i","x","y","scale","rot","Math","random","delay","getAnimation","r","s","Deck","questions","onSubmit","useState","answers","Set","answered","useSprings","length","from","animation","set","bind","useDrag","args","index","down","delta","xDelta","direction","xDir","velocity","dir","isRight","add","has","tension","window","innerWidth","config","friction","size","map","key","style","transform","interpolate","position","getSettings","a","localStorage","getItem","rawData","buffer","JSON","parse","amount","level","saveSettings","stringify","setItem","toQueryParams","params","URLSearchParams","Object","entries","value","append","toString","getQuestions","type","search","fetch","response","json","results","item","decode","calculateScore","points","persistedData","hits","answer","correct_answer","Game","useHistory","settings","useSWR","suspense","settingsToKeys","revalidateOnFocus","process","useCallback","pathname","state","Loader","Results","useLocation","highscore","Settings","mutate","setLevel","prevState","addAmount","sum","backgroundColor","goBack","ErrorBoundary","Component","constructor","super","this","error","componentDidCatch","setState","render","children","App","basename","fallback","exact","path","component","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f083779.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nconst Level = styled.div`\n  align-items: center;\n  flex-direction: row;\n  display: inline-flex;\n  justify-content: space-between;\n  width: ${props => props.width ? props.width : '100%'};\n\n  @media (max-width: 600px) {\n    width: 100vw;\n    flex-direction: ${({ nonResponsive }) => nonResponsive ? 'row' : 'column' };\n  }\n`;\n\nexport default Level;","import styled from '@emotion/styled';\n\nconst Button = styled.button`\n  margin: 1em;\n  cursor: pointer;\n  color: #000;\n  border: none;\n  font-weight: 600;\n  background-color: #F0F0F0;\n  font-size: 1.3rem;\n  padding: .25rem 1rem;\n  text-align: center;\n  border-radius: 1rem;\n  white-space: no-wrap;\n  justify-content: center;\n  box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1);\n`;\n\nexport default Button;","import styled from '@emotion/styled';\n\nconst Text = styled.span`\n  font-size: 18px;\n  color: ${({ color }) => color};\n  font-weight: ${({ bold }) => bold ? '600' : 'normal'};\n\n  @media (max-width: 600px) {\n    font-size: 14px;\n  }\n`;\n\nexport default Text;","import styled from '@emotion/styled';\n\nconst Title = styled.h1`\n  margin: 1.5rem auto;\n  font-size: 45px;\n  font-weight: 600;\n  color: ${props => props.color};\n\n  @media (max-width: 600px) {\n    font-size: 35px;\n  }\n`;\n\nexport default Title;","import React from 'react';\nimport Level from '../../components/Level';\nimport Button from '../../components/Button';\nimport { Title } from '../../components/Text';\n\nconst strings = {\n  welcome: 'Welcome to Fast Trivia!',\n  start: 'Start Game',\n  settings: 'Settings'\n}\n\nconst Home = ({ history }) => {\n  const startGame = () =>  history.push('/game');\n  const goToSettings = () => history.push('/settings');\n\n  return (\n    <>\n      <Title color=\"#0000005F\">\n        {strings.welcome}\n      </Title>\n      <Level width=\"60vw\">\n        <Button onClick={startGame}>\n          {strings.start}\n        </Button>\n        <Button onClick={goToSettings}>\n          {strings.settings}\n        </Button>  \n      </Level>\n    </>\n  );\n};\n\nexport default Home;","import React from 'react'\nimport styled from '@emotion/styled';\nimport { animated } from 'react-spring';\n\nconst Base = styled(animated.div)`\n  margin: 0;\n  width: 40vh;\n  height: 80vh;  \n  max-width: 300px;\n  max-height: 570px;\n  border-radius: 10px;\n  will-change: transform;\n  background-color: white;\n  background-size: auto 85%;\n  background-repeat: no-repeat;\n  background-position: center center;\n  border: solid 2px ${props => props.color};\n  box-shadow: 0 12.5px 100px -10px rgba(50, 50, 73, 0.4), 0 10px 10px -10px rgba(50, 50, 73, 0.3);\n`;\n\nconst Content = styled.div`\n  margin: 0;\n  flex-grow: 1;\n  height: 100%;\n  display: flex;\n  padding: 1rem;\n  flex-wrap: wrap;\n  max-width: 100%;\n  overflow-x: wrap;\n  align-items: center;\n  flex-direction: column;\n  justify-content: space-between;\n`\n\nconst borderColor = {\n  hard: 'red',\n  medium: 'orange',\n  easy: 'green',\n};\n\nconst Card = ({ data, ...props }) => (\n  <Base {...props} color={borderColor[data.difficulty]}>\n    <Content>\n      <h2>{data.category}</h2>\n      <p>{data.question}</p>\n      <span>Difficulty: {data.difficulty}</span>\n    </Content>\n  </Base>\n);\n\nexport default Card;","import styled from '@emotion/styled';\n\nconst Layout = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  position: absolute;\n  align-items: center;\n  will-change: transform;\n  justify-content: center;\n`;\n\nexport default Layout;","import Card from '../Card';\nimport Layout from '../Layout';\nimport React, { useState } from 'react';\nimport { useDrag } from 'react-use-gesture';\nimport { useSprings, interpolate, animated } from 'react-spring';\n\nconst friction = 50;\nconst Wrapper = Layout.withComponent(animated.div)\nconst from = i => ({ x: 0, rot: 0, scale: 1.5, y: -1000 })\nconst to = i => ({ x: 0, y: i * -4, scale: 1, rot: -10 + Math.random() * 20, delay: i * 100 })\nconst getAnimation = (r, s) => `perspective(1500px) rotateX(30deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`\n\nconst Deck = ({ questions, onSubmit }) => {\n  const [answers] = useState([]);\n  const [answered] = useState(() => new Set());\n  const [animation, set] = useSprings(questions.length, i => ({\n    to: to(i),\n    from: from(i),\n  }));\n\n  const bind = useDrag(({\n    args: [index], down, delta: [xDelta], direction: [xDir], velocity,\n  }) => {\n    const dir = xDir > 0 ? 1 : -1;\n    const isFlicking = velocity > 0.2;\n    if(!down && isFlicking) {\n      const isRight = dir === 1;\n\n      answered.add(index);\n      answers[index] = isRight === true ? 'True' : 'False';\n    }\n\n    set(i => {\n      if(i === index){\n        const scale = down ? 1.1 : 1;\n        const isAnswered = answered.has(index);\n        \n        if(isAnswered){\n          const tension = down ? 800 : 200;\n          const x = (200 + window.innerWidth) * dir;\n          const rot = xDelta /100 + (dir * velocity * 10);\n          \n          return {\n            x, \n            rot,\n            scale,\n            config: {\n              tension,\n              friction,\n            }\n          }\n        } else {\n          const rot = xDelta / 100;\n          const x = down ? xDelta : 0;\n          const tension = down ? 800 : 500;\n\n          return {\n            x, \n            rot,\n            scale,\n            config: {\n              tension,\n              friction,\n            }\n          }\n        }\n      }\n    })\n\n    // a cascade of conditions\n    // that end up in the submission\n    // of the results\n    !down \n    && onSubmit\n    && questions.length > 0 \n    && answered.size === questions.length\n    && onSubmit(answers);\n  });\n\n  return animation.map(({ x, y, rot, scale }, i) => (\n    <Wrapper\n      key={i}\n      style={{\n        transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`) \n      }}\n    >\n      <Card \n        {...bind(i)}\n        data={questions[i]}\n        style={{\n          position: 'relative',\n          transform: interpolate([rot, scale], getAnimation),\n        }}\n      />\n    </Wrapper>\n  ))\n};\n\nexport default Deck;","export const getSettings = async () => {\n  const rawData = await localStorage.getItem('settings')\n  const buffer = JSON.parse(rawData)\n\n  return buffer || { amount: 5, level: 'easy' }\n}\n\nexport const saveSettings = async data => {\n  const buffer = JSON.stringify(data)\n\n  await localStorage.setItem('settings', buffer)\n}\n","import useSwr from \"swr\";\n\nconst fetcher = (...args) => fetch(...args).then(response => response.json());\n\nexport const useSuspense = (path, options) => useSwr(path, fetcher, { ...options, useSuspense: true });\n\nexport const toQueryParams = data => {\n  const params = new URLSearchParams();\n\n  Object.entries(data).map(([key, value]) => {\n    params.append(key, value);\n    \n    return null;\n  });\n\n  return `?${params.toString()}`;\n};\n","import { decode } from 'he';\nimport { getSettings } from './settings';\nimport { toQueryParams } from '../utils/helpers';\n\nexport const getQuestions = async (difficulty = 'medium', amount = 10, type = 'boolean') => {\n  const baseUrl = 'https://opentdb.com/api.php';\n  const search = toQueryParams({\n    type,\n    amount,\n    difficulty,\n  });\n\n  const response = await fetch(`${baseUrl}${search}`);\n  const { results } = await response.json();\n   \n  return results.map(({ question, ...item }) => ({\n    ...item,\n    question: decode(question),\n  }))\n};\n\nexport const calculateScore = async (questions, answers) => {\n  let points = 0;\n\n  const { level, amount } = await getSettings();\n  const persistedData = await localStorage.getItem(`highscore-${level}-${amount}`) ?? 0;\n  const hits = answers.map((answer, index) => {\n    const question = questions[index];\n\n    if(answer === question.correct_answer) points++;\n\n    return ({\n      ...question,\n      answer,\n    });        \n  });\n\n  if(persistedData < points){\n    await localStorage.setItem(`highscore-${level}-${amount}`, points);\n  }\n\n  return {\n    hits,\n    points,\n  }\n}","import useSWR from 'swr';\nimport Deck from '../../components/Deck';\nimport React, { useCallback } from 'react'; \nimport Level from '../../components/Level';\nimport { Title } from '../../components/Text';\nimport { useHistory } from 'react-router-dom';\nimport { getSettings } from '../../service/settings';\nimport { getQuestions, calculateScore } from '../../service/questions';\n\nconst settingsToKeys = ({ level, amount }) => [level, amount]\n\nconst Game = () => {\n  const history = useHistory()\n  const { data: settings } = useSWR('settings', getSettings, { suspense:true })\n  const { data: questions = [] } = useSWR(settingsToKeys(settings), getQuestions, { suspense: true, revalidateOnFocus: process.env.NODE_ENV !== 'development' })\n\n  const onSubmit = useCallback(async answers => {\n    const results = await calculateScore(questions, answers)\n\n    history.push({ pathname: '/results', state: {\n      results,\n      settings,\n    } })\n  }, [questions, history, settings])\n\n  return (\n    <Level nonResponsive>\n      <Title color=\"#0000005F\">False</Title>\n      <Deck\n        onSubmit={onSubmit}\n        questions={questions} \n      />\n      <Title color=\"#0000005F\">True</Title>\n    </Level>\n  )\n}\n\nexport default Game;\n","import styled from '@emotion/styled'\n\nconst Loader = styled.div`\n  border-radius: 50%;\n  border: 0.5rem solid #8884;\n  border-top: 0.5rem solid #48B;\n  height: 8rem;\n  width: 8rem;\n  animation: spins 2s infinite;\n\n  @media (max-width: 600px) {\n    height: 5rem;\n    width: 5rem;\n  }\n\n  @keyframes spins {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`\n\nexport default Loader\n","import useSWR from 'swr';\nimport React from 'react';\nimport Level from '../../components/Level';\nimport Button from '../../components/Button';\nimport Text, { Title } from '../../components/Text';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nconst Results = () => {\n  const history = useHistory()\n  const { state: { results: { points }, settings: { amount, level } } } = useLocation()\n  const { data: highscore } = useSWR(`highscore-${level}-${amount}`, key => localStorage.getItem(key), { suspense: true })\n\n  const goHome = () => history.push('/');\n  const restartGame = () => history.push('/game');\n  \n  return (\n      <>\n        <Title color=\"#0000005F\">\n          {'Game Results'}\n        </Title>\n        {\n          // eslint-disable-next-line eqeqeq\n          points == highscore && (\n            <Title>New Record!</Title>\n          )\n        }\n        <span>\n          <Text>Highscore: </Text>\n          {highscore}\n        </span>\n        <span>\n          <Text>Correct Answers: </Text>\n          {points}\n        </span>\n        <Level \n          width=\"60vh\"\n          nonResponsive\n        >\n          <Button \n            onClick={restartGame}\n          >\n            Play Again\n          </Button>\n          <Button \n            onClick={goHome}\n          >\n            Go Home\n          </Button>\n        </Level>\n      </>\n  )\n};\n\nexport default Results;\n","import useSWR from 'swr';\nimport React, { useState } from 'react';\nimport Level from '../../components/Level';\nimport Button from '../../components/Button';\nimport { useHistory } from 'react-router-dom';\nimport Text, { Title } from '../../components/Text';\nimport { getSettings, saveSettings }  from '../../service/settings'\n\nconst Settings = () => {\n  const history = useHistory()\n  const { data: settings, mutate } = useSWR('settings', getSettings, { suspense:true });\n  const [buffer, set] = useState(settings);\n\n  const setLevel = level => () => set(prevState => ({ ...prevState, level }));\n  const addAmount = sum => () => set(prevState => ({ ...prevState, amount: prevState.amount + sum }));\n  const goHome = () => history.push('/');\n  const submitChanges = () => {\n    saveSettings(buffer);\n    mutate(buffer);\n    history.goBack()\n  };\n\n  return (\n      <>\n        <Title>{'Game Settings'}</Title>\n        <Text>{'Number of Questions:'}</Text>\n        <Level nonResponsive width=\"30vw\">\n          <Button style={{ transform: 'scale(1.3)' }} onClick={addAmount(-1)}>-</Button>\n          <Text>{buffer.amount}</Text>\n          <Button style={{ transform: 'scale(1.3)' }} onClick={addAmount(1)}>+</Button>\n        </Level>\n        <Text>{'Difficulty Level:'}</Text>\n        <Level width=\"30vw\">\n          <Button \n            onClick={setLevel('easy')}\n            style={{ \n              color: '#FFF',\n              backgroundColor: '#3A3',\n              transform: `scale(${buffer.level === 'easy' ? '1.3' : '1'})` \n            }}\n          >\n            Easy\n          </Button>\n          <Button \n            onClick={setLevel('medium')}\n            style={{ \n              color: '#FFF',\n              backgroundColor: '#F90',\n              transform: `scale(${buffer.level === 'medium' ? '1.3' : '1'})` \n            }}\n          >\n            Medium\n          </Button>\n          <Button \n            onClick={setLevel('hard')}\n            style={{ \n              color: '#FFF',\n              backgroundColor: '#D33',\n              transform: `scale(${buffer.level === 'hard' ? '1.3' : '1'})` \n            }}\n          >\n            Hard\n          </Button>\n        </Level>        \n        <Level nonResponsive width=\"60vw\">\n          <Button onClick={goHome}>Cancel</Button>\n          <Button onClick={submitChanges}>Save</Button>\n        </Level>\n      </>\n  );\n};\n\nexport default Settings;\n","import styled from '@emotion/styled';\n\nconst Content = styled.div`\n  width: 100%;\n  height: 100%;\n  flex-grow: 1;\n  text-align: center;\n  align-items: center;\n  display: inline-flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nexport default Content;","import Content from '../Content';\nimport { Title } from '../Text';\nimport React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = { error: null };\n  }\n\n  componentDidCatch(error){\n    this.setState({ error });\n  }\n\n  render() {\n    return (\n      <Content>\n        { this.state.error ? <Title color=\"D33\">Oopsie Doopsie!</Title> : this.props.children }\n      </Content>\n    );\n  }\n}\n\nexport default ErrorBoundary;\n","import Home from './containers/Home';\nimport Game from './containers/Game';\nimport React, { Suspense } from 'react';\nimport Loader from './components/Loader';\nimport Results from './containers/Results';\nimport Settings from './containers/Settings';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nconst App = () => (\n  <BrowserRouter basename=\"/fast-trivia\">\n    <ErrorBoundary>\n      <Suspense\n        fallback={<Loader />}\n      >\n        <Switch>\n          <Route exact path=\"/game\" component={Game} />\n          <Route exact path=\"/results\" component={Results} />\n          <Route exact path=\"/settings\" component={Settings} />\n          <Route component={Home} />\n        </Switch>\n      </Suspense>\n    </ErrorBoundary>\n  </BrowserRouter>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}