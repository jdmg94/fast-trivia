{"version":3,"sources":["containers/Game/Game.ducks.js","components/Level/Level.js","components/Card/Card.js","components/Text/Text.js","components/Text/Title.js","components/Text/Label.js","components/Layout/Layout.js","components/Deck/Deck.js","containers/Game/Game.js","utils/helpers.js","service/questions.js","containers/Game/Game.sagas.js","components/Content/Content.js","containers/Settings/Settings.ducks.js","containers/Settings/Settings.js","store/reducer.js","store/index.js","components/Button/Button.js","containers/Home/Home.js","containers/Results/Results.js","App.js","serviceWorker.js","index.js"],"names":["SUBMIT_ANSWERS","FETCH_QUESTIONS","initialState","results","points","hits","questions","fetchQuestionsFail","error","payload","type","fetchQuestionsSuccess","reducer","state","arguments","length","undefined","_ref","Object","objectSpread","answers","map","answer","index","question","correct_answer","Level","styled","div","_templateObject","props","width","Base","animated","Card_templateObject","color","Content","_templateObject2","borderColor","hard","medium","easy","Card","data","objectWithoutProperties","react_default","a","createElement","assign","difficulty","category","Text","span","Text_templateObject","Title","withComponent","Title_templateObject","Label","Label_templateObject","Layout","Layout_templateObject","to","i","x","y","scale","rot","Math","random","delay","trans","r","s","concat","Deck","onSubmit","_useState","useState","slicedToArray","_useState3","Set","answered","_useSprings","useSprings","from","_useSprings2","animation","set","bind","useGesture","_ref2","args","down","xDelta","delta","xDir","direction","velocity","dir","isRight","add","has","tension","window","innerWidth","config","friction","size","Layout_Layout","Level_Level","Text_Title","_ref3","key","style","transform","interpolate","components_Card_Card","connect","game","history","dispatch","useCallback","submitAnswers","push","useEffect","components_Deck_Deck","toQueryParams","params","URLSearchParams","entries","value","append","toString","getQuestions","asyncToGenerator","regenerator_default","mark","_callee","amount","search","response","_args","wrap","_context","prev","next","fetch","sent","json","abrupt","item","decode","stop","apply","this","fetchAllQuestions","updatePersistedScores","rootSaga","getGameResults","getSettings","level","settings","numberOfQuestions","select","call","put","t0","_marked","persistedData","_context2","localStorage","getItem","setItem","_marked2","_context3","all","takeLatest","_marked3","Content_templateObject","levels","components_Content_Content","Text_Label","onChange","target","min","max","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","sagas","Button","button","Button_templateObject","Home","Button_Button","onClick","_useState2","highscore","setHighscore","GlobalStyle","createGlobalStyle","App_templateObject","App","es","react_router_dom","react_router","exact","path","component","Game","Results","Settings","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.36a5f0d9.chunk.js","sourcesContent":["const RESET_GAME = 'GAME/RESET_GAME';\r\nconst SUBMIT_ANSWERS = 'game/SUBMIT_ANSWERS';\r\nconst FETCH_QUESTIONS = 'game/FETCH_QUESTIONS';\r\nconst FETCH_QUESTIONS_FAIL = 'game/FETCH_QUESTIONS_FAIL';\r\nconst FETCH_QUESTIONS_SUCCESS = 'game/FETCH_QUESTIONS_SUCCESS';\r\n\r\nconst initialState = {\r\n  results: {\r\n    points: 0,\r\n    hits: [],\r\n  },\r\n  questions: [],\r\n};\r\n\r\nconst reducer = (state = initialState, { type, payload }) => {\r\n  switch(type){\r\n    case FETCH_QUESTIONS_SUCCESS: {\r\n      const { questions } = payload;\r\n      const { results } = initialState;\r\n\r\n      return {\r\n        ...state,\r\n        results,\r\n        questions,\r\n      }\r\n    }\r\n\r\n    case SUBMIT_ANSWERS: {\r\n      let points = 0;\r\n      const { answers } = payload;\r\n      const { questions } = state;\r\n\r\n      const hits = answers.map((answer, index) => {\r\n        const question = questions[index];\r\n\r\n        if(answer === question.correct_answer) points++;\r\n\r\n        return ({\r\n          ...question,\r\n          answer,\r\n        });        \r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        results: {\r\n          hits,\r\n          points,\r\n        },\r\n      }\r\n    }\r\n\r\n    case RESET_GAME: return initialState;\r\n    default: return state;\r\n  }\r\n};\r\n\r\nconst resetGame = () => ({\r\n  type: RESET_GAME,\r\n})\r\n\r\nconst submitAnswers = answers => ({\r\n  type: SUBMIT_ANSWERS,\r\n  payload: { answers },\r\n});\r\n\r\nconst fetchQuestions = () => ({\r\n  type: FETCH_QUESTIONS,\r\n});\r\n\r\nconst fetchQuestionsFail = error => ({\r\n  payload: { error },\r\n  type: FETCH_QUESTIONS_FAIL,\r\n});\r\n\r\nconst fetchQuestionsSuccess = questions => ({\r\n  payload: { questions },\r\n  type: FETCH_QUESTIONS_SUCCESS,\r\n});\r\n\r\nexport default reducer;\r\nexport {\r\n  RESET_GAME,\r\n  SUBMIT_ANSWERS,\r\n  FETCH_QUESTIONS,\r\n  FETCH_QUESTIONS_FAIL,\r\n  FETCH_QUESTIONS_SUCCESS,\r\n  resetGame,\r\n  submitAnswers,\r\n  fetchQuestions,\r\n  fetchQuestionsFail,\r\n  fetchQuestionsSuccess,\r\n}\r\n","import styled from 'styled-components';\r\n\r\nconst Level = styled.div`\r\n  padding: 2rem;\r\n  align-items: center;\r\n  display: inline-flex;\r\n  justify-content: space-between;\r\n  width: ${props => props.width ? props.width : '100%'};\r\n`;\r\n\r\nexport default Level;","import React from 'react'\r\nimport styled from 'styled-components';\r\nimport { animated } from 'react-spring';\r\n\r\nconst Base = styled(animated.div)`\r\n  width: 40vh;\r\n  height: 80vh;  \r\n  max-width: 300px;\r\n  max-height: 570px;\r\n  border-radius: 10px;\r\n  will-change: transform;\r\n  background-color: white;\r\n  background-size: auto 85%;\r\n  background-repeat: no-repeat;\r\n  background-position: center center;\r\n  border: solid 2px ${props => props.color};\r\n  box-shadow: 0 12.5px 100px -10px rgba(50, 50, 73, 0.4), 0 10px 10px -10px rgba(50, 50, 73, 0.3);\r\n`;\r\n\r\nconst Content = styled.div`\r\n  margin: 0;\r\n  flex-grow: 1;\r\n  height: 100%;\r\n  display: flex;\r\n  padding: 1rem;\r\n  flex-wrap: wrap;\r\n  max-width: 100%;\r\n  overflow-x: wrap;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst borderColor = {\r\n  hard: 'red',\r\n  medium: 'orange',\r\n  easy: 'green',\r\n};\r\n\r\nconst Card = ({ data, ...props }) => {\r\n\r\n  return (\r\n    <Base {...props} color={borderColor[data.difficulty]}>\r\n      <Content>\r\n        <h2>{data.category}</h2>\r\n        <p>{data.question}</p>\r\n        <span>Difficulty: {data.difficulty}</span>\r\n      </Content>\r\n    </Base>\r\n  );\r\n};\r\n\r\nexport default Card;","import styled from 'styled-components';\r\n\r\nconst Text = styled.span`\r\n  color: ${props => props.color};\r\n`;\r\n\r\nexport default Text;","import Text from './Text';\r\nimport styled from 'styled-components';\r\n\r\nconst Title = styled(Text.withComponent('h1'))`\r\n  font-size: 45px;\r\n  font-weight: 600;\r\n`;\r\n\r\nexport default Title;","import Text from './Text';\r\nimport styled from 'styled-components';\r\n\r\nconst Label = styled(Text)`\r\n  font-weight: bold;\r\n`;\r\n\r\nexport default Label;\r\n","import styled from 'styled-components';\r\nimport { animated } from 'react-spring';\r\n\r\nconst Layout = styled(animated.div)`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  position: absolute;\r\n  align-items: center;\r\n  will-change: transform;\r\n  justify-content: center;\r\n`;\r\n\r\nexport default Layout;","import Level from '../Level';\r\nimport Card from '../Card';\r\nimport { Title } from '../Text';\r\nimport Layout from '../Layout';\r\nimport React, { useState } from 'react';\r\nimport { useGesture } from 'react-with-gesture';\r\nimport { useSprings, interpolate } from 'react-spring';\r\n\r\nconst from = i => ({ x: 0, rot: 0, scale: 1.5, y: -1000 })\r\nconst to = i => ({ x: 0, y: i * -4, scale: 1, rot: -10 + Math.random() * 20, delay: i * 100 })\r\nconst trans = (r, s) => `perspective(1500px) rotateX(30deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`\r\n\r\nconst Deck = ({ questions, onSubmit }) => {\r\n  const [answers] = useState([]);\r\n  const [answered] = useState(() => new Set());\r\n  const [animation, set] = useSprings(questions.length, i => ({\r\n    to: to(i),\r\n    from: from(i),\r\n  }));\r\n\r\n  const bind = useGesture(({\r\n    args: [index], down, delta: [xDelta], direction: [xDir], velocity,\r\n  }) => {\r\n    const dir = xDir > 0 ? 1 : -1;\r\n    const isFlicking = velocity > 0.2;\r\n    if(!down && isFlicking) {\r\n      const isRight = dir === 1;\r\n\r\n      answered.add(index);\r\n      answers[index] = isRight === true ? 'True' : 'False';\r\n    }\r\n\r\n    set(i => {\r\n      if(i === index){\r\n        const friction = 50;\r\n        const scale = down ? 1.1 : 1;\r\n        const isAnswered = answered.has(index);\r\n        \r\n        if(isAnswered){\r\n          const tension = down ? 800 : 200;\r\n          const x = (200 + window.innerWidth) * dir;\r\n          const rot = xDelta /100 + (dir * velocity * 10);\r\n          \r\n          return {\r\n            x, \r\n            rot,\r\n            scale,\r\n            config: {\r\n              tension,\r\n              friction,\r\n            }\r\n          }\r\n        } else {\r\n          const rot = xDelta / 100;\r\n          const x = down ? xDelta : 0;\r\n          const tension = down ? 800 : 500;\r\n\r\n          return {\r\n            x, \r\n            rot,\r\n            scale,\r\n            config: {\r\n              tension,\r\n              friction,\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n\r\n    // a cascade of conditions\r\n    // that end up in the submission\r\n    // of the results\r\n    !down \r\n    && onSubmit\r\n    && questions.length > 0 \r\n    && answered.size === questions.length\r\n    && onSubmit(answers);\r\n  });\r\n\r\n  return (\r\n    <Layout>\r\n      <Level>\r\n        <Title color=\"#0000005F\">False</Title>\r\n        {\r\n          animation.map(({ x, y, rot, scale }, i) => (\r\n            <Layout\r\n              key={i} \r\n              style={{ \r\n                transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`) \r\n              }}\r\n            >\r\n              <Card \r\n                {...bind(i)}\r\n                data={questions[i]}\r\n                style={{\r\n                  transform: interpolate([rot, scale], trans),\r\n                }}\r\n              />\r\n            </Layout>\r\n          ))\r\n        }\r\n        <Title color=\"#0000005F\">True</Title>\r\n      </Level>\r\n    </Layout>\r\n  )\r\n};\r\n\r\nexport default Deck;","import { connect } from 'react-redux';\r\nimport React, { useEffect, useCallback } from 'react'; \r\nimport Deck from '../../components/Deck';\r\nimport { submitAnswers, fetchQuestions } from './Game.ducks';\r\n\r\n\r\nconst Wrapper = ({ questions, history, dispatch }) => {\r\n  const onSubmit = useCallback(answers => {\r\n    dispatch(submitAnswers(answers));\r\n\r\n    history.push('/results');\r\n  });\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchQuestions());\r\n  }, []);\r\n\r\n  return questions.length > 0 && (\r\n    <Deck\r\n      onSubmit={onSubmit}\r\n      questions={questions} \r\n    />\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  questions: state.game.questions,\r\n})\r\nexport default connect(mapStateToProps)(Wrapper);","export const toQueryParams = data => {\r\n  const params = new URLSearchParams();\r\n\r\n  Object.entries(data).map(([key, value]) => {\r\n    params.append(key, value);\r\n    \r\n    return null;\r\n  });\r\n\r\n  return `?${params.toString()}`;\r\n};","import { decode } from 'he';\r\nimport { toQueryParams } from '../utils/helpers';\r\n\r\nexport const getQuestions = async (difficulty = 'medium', amount = 10, type = 'boolean') => {\r\n  const baseUrl = 'https://opentdb.com/api.php';\r\n  const search = toQueryParams({\r\n    type,\r\n    amount,\r\n    difficulty,\r\n  });\r\n\r\n  const response = await fetch(`${baseUrl}${search}`);\r\n  const { results } = await response.json();\r\n   \r\n  return results.map(({ question, ...item }) => ({\r\n    ...item,\r\n    question: decode(question),\r\n  }))\r\n};","import { getQuestions } from '../../service/questions';\r\nimport { takeLatest, all, put, call, select } from 'redux-saga/effects';\r\nimport { \r\n  fetchQuestionsFail, fetchQuestionsSuccess, FETCH_QUESTIONS, SUBMIT_ANSWERS,\r\n} from './Game.ducks';\r\n\r\nconst getGameResults = state => state.game.results;\r\nconst getSettings = state => ({\r\n  level: state.settings.level,\r\n  numberOfQuestions: state.settings.numberOfQuestions,\r\n});\r\n\r\nfunction* fetchAllQuestions(){\r\n  try{\r\n    const {\r\n      level, numberOfQuestions,\r\n    } = yield select(getSettings);\r\n    const questions = yield call(getQuestions, level, numberOfQuestions);\r\n\r\n    yield put(fetchQuestionsSuccess(questions));\r\n  } catch (error){\r\n    yield put(fetchQuestionsFail(error));\r\n  }\r\n};\r\n\r\nfunction* updatePersistedScores(){\r\n  const { points } = yield select(getGameResults);\r\n  const persistedData = yield localStorage.getItem('highscore');\r\n  \r\n  if(!persistedData || persistedData < points){\r\n    yield localStorage.setItem('highscore', points);\r\n  }\r\n}\r\n\r\nfunction* rootSaga(){\r\n  yield all([\r\n    takeLatest(SUBMIT_ANSWERS, updatePersistedScores),\r\n    takeLatest(FETCH_QUESTIONS, fetchAllQuestions),\r\n  ])\r\n};\r\n\r\nexport default rootSaga;","import styled from 'styled-components';\r\n\r\nconst Content = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  flex-grow: 1;\r\n  text-align: center;\r\n  align-items: center;\r\n  display: inline-flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n`;\r\n\r\nexport default Content;","const SET_DIFFICULTY = 'settings/SET_DIFFICULTY';\r\nconst SET_AMOUNT_OF_QUESTIONS = 'settings/SET_AMOUNT_OF_QUESTIONS';\r\n\r\nconst initialState = {\r\n  level: 'hard',\r\n  levels: [\r\n    'easy',\r\n    'medium',\r\n    'hard',\r\n  ],\r\n  numberOfQuestions: 10,\r\n};\r\n\r\nconst reducer = (state = initialState, { type, payload }) => {\r\n  switch(type){\r\n    case SET_DIFFICULTY: {\r\n      const { level } = payload;\r\n\r\n      return {\r\n        ...state,\r\n        level,\r\n      };\r\n    }\r\n    case SET_AMOUNT_OF_QUESTIONS: {\r\n      const { numberOfQuestions } = payload;\r\n\r\n      return {\r\n        ...state,\r\n        numberOfQuestions,\r\n      };\r\n    }\r\n\r\n    default: return state;\r\n  }\r\n}\r\n\r\nconst setDifficulty = level => ({\r\n  payload: { level },\r\n  type: SET_DIFFICULTY,\r\n});\r\n\r\nconst setNumberOfQuestions = numberOfQuestions => ({\r\n  type: SET_AMOUNT_OF_QUESTIONS,\r\n  payload: { numberOfQuestions },\r\n});\r\n\r\nexport default reducer;\r\nexport {\r\n  SET_DIFFICULTY,\r\n  SET_AMOUNT_OF_QUESTIONS,\r\n  setDifficulty,\r\n  setNumberOfQuestions,\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Content from '../../components/Content';\r\nimport { Title, Label } from '../../components/Text';\r\nimport { setDifficulty, setNumberOfQuestions } from './Settings.ducks';\r\n\r\nconst mapStateToProps = state => ({\r\n  level: state.settings.level,\r\n  levels: state.settings.levels,\r\n  numberOfQuestions: state.settings.numberOfQuestions,\r\n});\r\n\r\nconst Settings = ({ \r\n  level, levels, numberOfQuestions, dispatch \r\n}) => {\r\n  const changeLevel = ({ target }) => {\r\n    const { value } = target;\r\n    dispatch(setDifficulty(value));\r\n  };\r\n\r\n  const changeAmountOfQuestions = ({ target }) => {\r\n    const { value } = target;\r\n    dispatch(setNumberOfQuestions(value));\r\n  }\r\n\r\n  return (\r\n    <Content>\r\n      <Title>Game Settings</Title>\r\n      <span>\r\n        <Label>Level: </Label>\r\n        <select\r\n          value={level}\r\n          onChange={changeLevel}\r\n        >\r\n        {\r\n          levels.map((item, i) => (\r\n            <option \r\n              key={i}\r\n              value={item}\r\n            >\r\n              {item}\r\n            </option>\r\n          ))\r\n        }\r\n        </select>\r\n      </span>\r\n      <span>\r\n        <Label>Number of Questions: </Label>\r\n        <input \r\n          min={5}\r\n          max={20}\r\n          type=\"number\" \r\n          value={numberOfQuestions} \r\n          onChange={changeAmountOfQuestions}\r\n        />\r\n      </span>\r\n    </Content>\r\n  )\r\n}\r\n\r\nexport default connect(mapStateToProps)(Settings);","import { combineReducers } from 'redux';\r\nimport { reducer as game } from '../containers/Game';\r\nimport { reducer as settings } from '../containers/Settings';\r\n\r\nconst reducer = combineReducers({\r\n  game,\r\n  settings,\r\n});\r\n\r\nexport default reducer;\r\n","import sagas from './sagas';\r\nimport reducer from './reducer';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { createStore, applyMiddleware } from 'redux';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(sagaMiddleware)));\r\n\r\nsagaMiddleware.run(sagas);\r\n\r\nexport default store;","import styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  margin: .5rem;\r\n  cursor: pointer;\r\n  color: #000;\r\n  border: none;\r\n  font-weight: 600;\r\n  background-color: #F0F0F0;\r\n  font-size: 1.3rem;\r\n  padding: .25rem 1rem;\r\n  text-align: center;\r\n  border-radius: 1rem;\r\n  white-space: no-wrap;\r\n  justify-content: center;\r\n  box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1);\r\n`;\r\n\r\nexport default Button;","import React from 'react';\r\nimport Level from '../../components/Level';\r\nimport Button from '../../components/Button';\r\nimport { Title } from '../../components/Text';\r\nimport Content from '../../components/Content';\r\n\r\nconst Home = ({ history }) => {\r\n  const startGame = () =>  history.push('/game');\r\n  const goToSettings = () => history.push('/settings');\r\n\r\n  return (\r\n    <Content>\r\n      <Title color=\"#0000005F\">\r\n        {'Welcome to Fast Trivia!'}\r\n      </Title>\r\n      <Level width=\"60vw\">\r\n        <Button onClick={startGame}>\r\n          {'Start Game'}\r\n        </Button>\r\n        <Button onClick={goToSettings}>\r\n          {'Settings'}\r\n        </Button>  \r\n      </Level>\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default Home;","import { connect } from 'react-redux';\r\nimport Level from '../../components/Level';\r\nimport Layout from '../../components/Layout';\r\nimport Button from '../../components/Button';\r\nimport Content from '../../components/Content';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Title, Label } from '../../components/Text';\r\n\r\nconst Results = ({ results, history }) => {\r\n  const [highscore, setHighscore] = useState(results.points);\r\n\r\n  useEffect(() => {\r\n    const value = localStorage.getItem('highscore');\r\n    if(value > highscore){\r\n      setHighscore(value);\r\n    }\r\n  }, []);\r\n\r\n  const restartGame = () => {\r\n    history.push('/game');\r\n  };\r\n\r\n  const goHome = () => {\r\n    history.push('/');\r\n  };\r\n  \r\n  return (\r\n    <Layout>\r\n      <Content>\r\n        <Title color=\"#0000005F\">\r\n          {'Game Results'}\r\n        </Title>\r\n        {\r\n          results.points === highscore && (\r\n            <Title>New Record!</Title>\r\n          )\r\n        }\r\n        <span>\r\n          <Label>Highscore: </Label>\r\n          {highscore}\r\n        </span>\r\n        <span>\r\n          <Label>Correct Answers: </Label>\r\n          {results.points}\r\n        </span>\r\n        <Level \r\n          width=\"60vh\"\r\n        >\r\n          <Button \r\n            onClick={restartGame}\r\n          >\r\n            Play Again\r\n          </Button>\r\n          <Button \r\n            onClick={goHome}\r\n          >\r\n            Go Home\r\n          </Button>\r\n        </Level>\r\n      </Content>\r\n    </Layout>\r\n  )\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  results: state.game.results,\r\n});\r\nexport default connect(mapStateToProps)(Results)","import React from 'react';\nimport store from './store';\nimport Home from './containers/Home';\nimport Game from './containers/Game';\nimport { Provider } from 'react-redux';\nimport Results from './containers/Results';\nimport Settings from './containers/Settings';\nimport { createGlobalStyle } from 'styled-components';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nconst GlobalStyle = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css?family=Montserrat');\n  body {\n    margin: 0;\n    padding: 0;\n    width: 100%;  \n    height: 100%;\n    position: fixed;\n    overflow: hidden;\n    user-select: none;\n    overscroll-behavior-y: contain;\n  }\n\n  html * {\n    box-sizing: border-box;\n    font-family: 'Montserrat', sans-serif !important;\n  }\n\n  #root {\n    background: lightblue;\n    position: fixed;\n    overflow: hidden;\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <GlobalStyle />\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/game\" component={Game} />\n          <Route exact path=\"/results\" component={Results} />\n          <Route exact path=\"/settings\" component={Settings} />\n          <Route component={Home} />\n        </Switch>\n      </BrowserRouter>\n    </Provider>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}