{"version":3,"sources":["Deck.js","containers/Game/Game.ducks.js","components/Card/Card.js","components/Layout/Layout.js","containers/Game/Game.js","utils/helpers.js","service/questions.js","containers/Game/Game.sagas.js","store/reducer.js","store/index.js","components/Button/Button.js","components/Text/Text.js","components/Text/Title.js","components/Text/Label.js","components/Content/Content.js","containers/Home/Home.js","containers/Results/Results.js","App.js","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","_templateObject","to","i","x","y","scale","rot","Math","random","delay","from","trans","r","s","concat","Deck","_useState","useState","_useState2","Object","slicedToArray","cards","setCards","useEffect","setTimeout","_useState3","Set","gone","_useSprings","useSprings","length","objectSpread","_useSprings2","props","set","bind","useGesture","_ref","index","args","down","xDelta","delta","xDir","distance","direction","velocity","dir","add","isGone","has","window","innerWidth","undefined","config","friction","tension","size","clear","react_default","a","createElement","Fragment","map","_ref2","web","div","key","style","transform","interpolate","assign","backgroundImage","SUBMIT_ANSWERS","FETCH_QUESTIONS","FETCH_QUESTIONS_FAIL","FETCH_QUESTIONS_SUCCESS","initialState","results","points","hits","questions","submitAnswers","answers","type","payload","fetchQuestions","fetchQuestionsFail","error","fetchQuestionsSuccess","reducer","state","arguments","answer","question","correct_answer","console","log","Base","styled","animated","Card_templateObject","Content","_templateObject2","Card","data","objectWithoutProperties","category","decode","difficulty","Layout","Layout_templateObject","Game","onSubmit","answered","animation","isRight","_ref3","Layout_Layout","components_Card_Card","connect","game","_ref4","history","dispatch","Game_Game","push","toQueryParams","params","URLSearchParams","entries","value","append","toString","getQuestions","asyncToGenerator","regenerator_default","mark","_callee","amount","search","response","_args","wrap","_context","prev","next","fetch","sent","json","abrupt","stop","apply","this","fetchAllQuestions","rootSaga","call","put","t0","_marked","_context2","all","takeLatest","_marked2","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","sagas","Button","button","Button_templateObject","Text","span","Text_templateObject","color","Title","withComponent","Title_templateObject","Label_templateObject","Content_templateObject","Home","components_Content_Content","Text_Title","Button_Button","onClick","resetGame","actionCreators","useCallback","App_templateObject","App","es","App_GlobalStyle","react_router_dom","react_router","exact","path","component","Results","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b14fe22f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useSprings, animated, interpolate } from 'react-spring'\r\nimport { useGesture } from 'react-with-gesture'\r\nimport { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n* {\r\n  box-sizing: border-box;\r\n}\r\n\r\nhtml,\r\nbody {\r\n  padding: 0;\r\n  width: 100%;  \r\n  height: 100%;\r\n  position: fixed;\r\n  overflow: hidden;\r\n  user-select: none;\r\n  overscroll-behavior-y: contain;\r\n}\r\n\r\n#root > div {\r\n  position: absolute;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  will-change: transform;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n#root > div > div {\r\n  background-color: white;\r\n  background-size: auto 85%;\r\n  background-repeat: no-repeat;\r\n  background-position: center center;\r\n  width: 45vh;\r\n  max-width: 300px;\r\n  height: 85vh;\r\n  max-height: 570px;\r\n  will-change: transform;\r\n  border-radius: 10px;\r\n  box-shadow: 0 12.5px 100px -10px rgba(50, 50, 73, 0.4), 0 10px 10px -10px rgba(50, 50, 73, 0.3);\r\n}\r\n`;\r\n\r\n// These two are just helpers, they curate spring data, values that are later being interpolated into css\r\nconst to = i => ({ x: 0, y: i * -4, scale: 1, rot: -10 + Math.random() * 20, delay: i * 100 })\r\nconst from = i => ({ x: 0, rot: 0, scale: 1.5, y: -1000 })\r\n// This is being used down there in the view, it interpolates rotation and scale into a css transform\r\nconst trans = (r, s) => `perspective(1500px) rotateX(30deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`\r\n\r\nfunction Deck() {\r\n  const [cards, setCards] = useState([]);\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setCards([\r\n        'https://upload.wikimedia.org/wikipedia/en/f/f5/RWS_Tarot_08_Strength.jpg',\r\n        'https://upload.wikimedia.org/wikipedia/en/5/53/RWS_Tarot_16_Tower.jpg',\r\n        'https://upload.wikimedia.org/wikipedia/en/9/9b/RWS_Tarot_07_Chariot.jpg',\r\n        'https://upload.wikimedia.org/wikipedia/en/d/db/RWS_Tarot_06_Lovers.jpg',\r\n        'https://upload.wikimedia.org/wikipedia/en/thumb/8/88/RWS_Tarot_02_High_Priestess.jpg/690px-RWS_Tarot_02_High_Priestess.jpg',\r\n        'https://upload.wikimedia.org/wikipedia/en/d/de/RWS_Tarot_01_Magician.jpg'\r\n      ]);\r\n    }, 1500);\r\n  }, []);\r\n  const [gone] = useState(() => new Set()) // The set flags all the cards that are flicked out\r\n  const [props, set] = useSprings(cards.length, i => ({ ...to(i), from: from(i) })) // Create a bunch of springs using the helpers above\r\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\r\n  const bind = useGesture(({ args: [index], down, delta: [xDelta], distance, direction: [xDir], velocity }) => {\r\n    const trigger = velocity > 0.2 // If you flick hard enough it should trigger the card to fly out\r\n    const dir = xDir < 0 ? -1 : 1 // Direction should either point left or right\r\n    if (!down && trigger) gone.add(index) // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\r\n    set(i => {\r\n      if (index !== i) return // We're only interested in changing spring-data for the current spring\r\n      const isGone = gone.has(index)\r\n      const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0 // When a card is gone it flys out left or right, otherwise goes back to zero\r\n      const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0) // How much the card tilts, flicking it harder makes it rotate faster\r\n      const scale = down ? 1.1 : 1 // Active cards lift up a bit\r\n      return { x, rot, scale, delay: undefined, config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 } }\r\n    })\r\n    if (!down && gone.size === cards.length) setTimeout(() => gone.clear() || set(i => to(i)), 600)\r\n  })\r\n  // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      {\r\n        props.map(({ x, y, rot, scale }, i) => (\r\n          <animated.div key={i} style={{ transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`) }}>\r\n            {/* This is the card itself, we're binding our gesture to it (and inject its index so we know which is which) */}\r\n            <animated.div {...bind(i)} style={{ transform: interpolate([rot, scale], trans), backgroundImage: `url(${cards[i]})` }} />\r\n          </animated.div>\r\n        ))\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Deck;\r\n","const RESET_GAME = 'GAME/RESET_GAME';\r\nconst SUBMIT_ANSWERS = 'game/SUBMIT_ANSWERS';\r\nconst FETCH_QUESTIONS = 'game/FETCH_QUESTIONS';\r\nconst FETCH_QUESTIONS_FAIL = 'game/FETCH_QUESTIONS_FAIL';\r\nconst FETCH_QUESTIONS_SUCCESS = 'game/FETCH_QUESTIONS_SUCCESS';\r\n\r\nconst initialState = {\r\n  results: {\r\n    points: 0,\r\n    hits: [],\r\n  },\r\n  questions: [],\r\n};\r\n\r\nconst reducer = (state = initialState, { type, payload }) => {\r\n  switch(type){\r\n    case FETCH_QUESTIONS_SUCCESS: {\r\n      const { questions } = payload;\r\n      const { results } = initialState;\r\n\r\n      return {\r\n        ...state,\r\n        results,\r\n        questions,\r\n      }\r\n    }\r\n\r\n    case SUBMIT_ANSWERS: {\r\n      let points = 0;\r\n      const { answers } = payload;\r\n      const { questions } = state;\r\n\r\n      const hits = answers.map((answer, index) => {\r\n        const question = questions[index];\r\n\r\n        if(answer === question.correct_answer) points++;\r\n\r\n        return ({\r\n          ...question,\r\n          answer,\r\n        });        \r\n      });\r\n\r\n\r\n      console.log('results', points, hits);\r\n      return {\r\n        ...state,\r\n        results: {\r\n          hits,\r\n          points,\r\n        },\r\n      }\r\n    }\r\n\r\n    case RESET_GAME: return initialState;\r\n    default: return state;\r\n  }\r\n};\r\n\r\nconst submitAnswers = answers => ({\r\n  type: SUBMIT_ANSWERS,\r\n  payload: { answers },\r\n});\r\n\r\nconst fetchQuestions = () => ({\r\n  type: FETCH_QUESTIONS,\r\n});\r\n\r\nconst fetchQuestionsFail = error => ({\r\n  payload: { error },\r\n  type: FETCH_QUESTIONS_FAIL,\r\n});\r\n\r\nconst fetchQuestionsSuccess = questions => ({\r\n  payload: { questions },\r\n  type: FETCH_QUESTIONS_SUCCESS,\r\n});\r\n\r\nexport default reducer;\r\nexport {\r\n  SUBMIT_ANSWERS,\r\n  FETCH_QUESTIONS,\r\n  FETCH_QUESTIONS_FAIL,\r\n  FETCH_QUESTIONS_SUCCESS,\r\n  submitAnswers,\r\n  fetchQuestions,\r\n  fetchQuestionsFail,\r\n  fetchQuestionsSuccess,\r\n}\r\n","import React from 'react'\r\nimport { decode } from 'he';\r\nimport styled from 'styled-components';\r\nimport { animated } from 'react-spring';\r\n\r\nconst Base = styled(animated.div)`\r\n  width: 45vh;\r\n  height: 85vh;  \r\n  max-width: 300px;\r\n  max-height: 570px;\r\n  border-radius: 10px;\r\n  will-change: transform;\r\n  background-color: white;\r\n  background-size: auto 85%;\r\n  background-repeat: no-repeat;\r\n  background-position: center center;\r\n  box-shadow: 0 12.5px 100px -10px rgba(50, 50, 73, 0.4), 0 10px 10px -10px rgba(50, 50, 73, 0.3);\r\n`;\r\n\r\nconst Content = styled.div`\r\n  margin: 0; \r\n  width: 100%;\r\n  flex-grow: 1;\r\n  height: 100%;\r\n  display: flex;\r\n  padding: 1rem;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst Card = ({ data, ...props }) => {\r\n\r\n  return (\r\n    <Base {...props}>\r\n      <Content>\r\n        <h2>{data.category}</h2>\r\n        <p>{decode(data.question)}</p>\r\n        <span>Difficulty: {data.difficulty}</span>\r\n      </Content>\r\n    </Base>\r\n  );\r\n};\r\n\r\nexport default Card;","import styled from 'styled-components';\r\nimport { animated } from 'react-spring';\r\n\r\nconst Layout = styled(animated.div)`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n  position: absolute;\r\n  align-items: center;\r\n  will-change: transform;\r\n  justify-content: center;\r\n`;\r\n\r\nexport default Layout;","import { connect } from 'react-redux';\r\nimport React, { useState, useEffect } from 'react'; \r\nimport Card from '../../components/Card';\r\nimport Layout from '../../components/Layout';\r\nimport { submitAnswers, fetchQuestions } from './Game.ducks';\r\nimport { useGesture } from 'react-with-gesture';\r\nimport { useSprings, interpolate } from 'react-spring';\r\n\r\nconst from = i => ({ x: 0, rot: 0, scale: 1.5, y: -1000 })\r\nconst to = i => ({ x: 0, y: i * -4, scale: 1, rot: -10 + Math.random() * 20, delay: i * 100 })\r\nconst trans = (r, s) => `perspective(1500px) rotateX(30deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`\r\n\r\nconst Game = ({ questions, onSubmit }) => {\r\n  const [answers] = useState([]);\r\n  const [answered] = useState(() => new Set());\r\n  const [animation, set] = useSprings(questions.length, i => ({\r\n    to: to(i),\r\n    from: from(i),\r\n  }));\r\n\r\n  const bind = useGesture(({\r\n    args: [index], down, delta: [xDelta], direction: [xDir], velocity,\r\n  }) => {\r\n    const dir = xDir > 0 ? 1 : -1;\r\n    const isFlicking = velocity > 0.2;\r\n    if(!down && isFlicking) {\r\n      const isRight = dir === 1;\r\n\r\n      answered.add(index);\r\n      answers[index] = isRight === true ? 'True' : 'False';\r\n    }\r\n\r\n    set(i => {\r\n      if(i === index){\r\n        const friction = 50;\r\n        const scale = down ? 1.1 : 1;\r\n        const isAnswered = answered.has(index);\r\n        \r\n        if(isAnswered){\r\n          const tension = down ? 800 : 200;\r\n          const x = (200 + window.innerWidth) * dir;\r\n          const rot = xDelta /100 + (dir * velocity * 10);\r\n          \r\n          return {\r\n            x, \r\n            rot,\r\n            scale,\r\n            config: {\r\n              tension,\r\n              friction,\r\n            }\r\n          }\r\n        } else {\r\n          const rot = xDelta / 100;\r\n          const x = down ? xDelta : 0;\r\n          const tension = down ? 800 : 500;\r\n\r\n          return {\r\n            x, \r\n            rot,\r\n            scale,\r\n            config: {\r\n              tension,\r\n              friction,\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n\r\n    // a cascade of conditions\r\n    // that end up in the submission\r\n    // of the results\r\n    !down \r\n    && questions.length > 0 \r\n    && answered.size === questions.length\r\n    && onSubmit\r\n    && onSubmit(answers);\r\n  });\r\n\r\n  return animation.map(({ x, y, rot, scale }, i) => (\r\n    <Layout \r\n      key={i} \r\n      style={{ \r\n        transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`) \r\n      }}\r\n    >\r\n      <Card \r\n        {...bind(i)}\r\n        data={questions[i]}\r\n        style={{\r\n          transform: interpolate([rot, scale], trans),\r\n        }}\r\n      />\r\n    </Layout>\r\n  ))\r\n};\r\n\r\nconst Wrapper = ({ questions, history, dispatch }) => {\r\n  const onSubmit = answers => {\r\n    dispatch(submitAnswers(answers));\r\n\r\n    history.push('/results');\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchQuestions());\r\n  }, []);\r\n\r\n  return questions.length > 0 && (\r\n    <Game\r\n      onSubmit={onSubmit}\r\n      questions={questions} \r\n    />\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  questions: state.game.questions,\r\n})\r\nexport default connect(mapStateToProps)(Wrapper);","export const toQueryParams = data => {\r\n  const params = new URLSearchParams();\r\n\r\n  Object.entries(data).map(([key, value]) => {\r\n    params.append(key, value);\r\n    \r\n    return null;\r\n  });\r\n\r\n  return `?${params.toString()}`;\r\n};","import { toQueryParams } from '../utils/helpers';\r\n\r\nexport const getQuestions = async (difficulty = 'hard', amount = 10, type = 'boolean') => {\r\n  const baseUrl = 'https://opentdb.com/api.php';\r\n  const search = toQueryParams({\r\n    type,\r\n    amount,\r\n    difficulty,\r\n  });\r\n\r\n  const response = await fetch(`${baseUrl}${search}`);\r\n  const { results } = await response.json();\r\n   \r\n  return results;\r\n};","import { getQuestions } from '../../service/questions';\r\nimport { takeLatest, all, put, call } from 'redux-saga/effects';\r\nimport { fetchQuestionsFail, fetchQuestionsSuccess, FETCH_QUESTIONS } from './Game.ducks';\r\n\r\nfunction* fetchAllQuestions(){\r\n  try{\r\n    const questions = yield call(getQuestions);\r\n\r\n    yield put(fetchQuestionsSuccess(questions));\r\n  } catch (error){\r\n    yield put(fetchQuestionsFail(error));\r\n  }\r\n};\r\n\r\nfunction* rootSaga(){\r\n  yield all([\r\n    takeLatest(FETCH_QUESTIONS, fetchAllQuestions),\r\n  ])\r\n};\r\n\r\nexport default rootSaga;","import { combineReducers } from 'redux';\r\nimport { reducer as game } from '../containers/Game';\r\n\r\nconst reducer = combineReducers({\r\n  game,\r\n});\r\n\r\nexport default reducer;\r\n","import sagas from './sagas';\r\nimport reducer from './reducer';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { createStore, applyMiddleware } from 'redux';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(sagaMiddleware)));\r\n\r\nsagaMiddleware.run(sagas);\r\n\r\nexport default store;","import styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  margin: .5rem;\r\n  cursor: pointer;\r\n  padding: 0 1rem;\r\n  text-align: center;\r\n  border-radius: 1rem;\r\n  white-space: no-wrap;\r\n  justify-content: center;\r\n`;\r\n\r\nexport default Button;","import styled from 'styled-components';\r\n\r\nconst Text = styled.span`\r\n  color: ${props => props.color};\r\n`;\r\n\r\nexport default Text;","import Text from './Text';\r\nimport styled from 'styled-components';\r\n\r\nconst Title = styled(Text.withComponent('h1'))`\r\n  font-size: 45px;\r\n  font-weight: 600;\r\n`;\r\n\r\nexport default Title;","import Text from './Text';\r\nimport styled from 'styled-components';\r\n\r\nconst Label = styled(Text)`\r\n  font-weight: bold;\r\n`;\r\n\r\nexport default Label;\r\n","import styled from 'styled-components';\r\n\r\nconst Content = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  flex-grow: 1;\r\n  text-align: center;\r\n  align-items: center;\r\n  display: inline-flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n`;\r\n\r\nexport default Content;","import React from 'react';\r\nimport Button from '../../components/Button';\r\nimport { Title } from '../../components/Text';\r\nimport Content from '../../components/Content';\r\n\r\nconst Home = ({ history }) => {\r\n  const startGame = () =>  history.push('/game');\r\n\r\n  return (\r\n    <Content>\r\n      <Title color=\"white\">\r\n        {'Welcome to Fast Trivia!'}\r\n      </Title>\r\n      <Button onClick={startGame}>\r\n        {'Start Game'}\r\n      </Button>\r\n    </Content>\r\n  );\r\n};\r\n\r\nexport default Home;","import React, { useCallback } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { actionCreators } from '../Game';\r\n\r\nconst { resetGame, fetchQuestions } = actionCreators;\r\nconst Results = ({ results, history, dispatch }) => {\r\n  // eslint-disable-next-line no-unused-vars\r\n  const restartGame = useCallback(() => {\r\n    dispatch(resetGame());\r\n    dispatch(fetchQuestions());\r\n    history.push('/game');\r\n  }, []);\r\n  \r\n  return (\r\n    <>\r\n      Hello Results\r\n    </>\r\n  )\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  results: {},\r\n});\r\nexport default connect(mapStateToProps)(Results)","import Deck from './Deck';\nimport React from 'react';\nimport store from './store';\nimport Home from './containers/Home';\nimport Game from './containers/Game';\nimport { Provider } from 'react-redux';\nimport Results from './containers/Results';\nimport { createGlobalStyle } from 'styled-components';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nconst GlobalStyle = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css?family=Montserrat');\n  body {\n    margin: 0;\n    padding: 0;\n    width: 100%;  \n    height: 100%;\n    position: fixed;\n    overflow: hidden;\n    user-select: none;\n    overscroll-behavior-y: contain;\n  }\n\n  html * {\n    box-sizing: border-box;\n    font-family: 'Montserrat', sans-serif !important;\n  }\n\n  #root {\n    background: lightblue;\n    position: fixed;\n    overflow: hidden;\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <GlobalStyle />\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/deck\" component={Deck} />\n          <Route exact path=\"/game\" component={Game} />\n          <Route exact path=\"/results\" component={Results} />\n          <Route component={Home} />\n        </Switch>\n      </BrowserRouter>\n    </Provider>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}